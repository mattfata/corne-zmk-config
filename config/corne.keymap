/*
 * TODD:
 * - Add character layers
 *   - num
 *   - sym
 *   - nav
 *   - mod
 * - Add adaptive layers
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define LAYER_HandsDownGold 0
//#define LAYER_HdgAdaptiveAfterG 1
//#define LAYER_HdgAdaptiveAfterP 2
//#define LAYER_HdgAdaptiveAfterB 3
//#define LAYER_HdgAdaptiveAfterD 4
//#define LAYER_HdgAdaptiveAfterA 5
//#define LAYER_Num 6
//#define LAYER_Sym 7
//#define LAYER_Nav 8
//#define LAYER_Mod 9
#define LAYER_Sys 1

#define BT_HOLD_TAP(name, btnum) name: name { \
    compatible = "zmk,behavior-tap-dance"; \
    #binding-cells = <0>; \
    tapping-term-ms = <200>; \
    bindings = <&bt BT_SEL btnum>, <&bt BT_DISC btnum>; \
}

/ {
chosen {
    zmk,physical-layout = &foostan_corne_5col_layout;
};

behaviors {
    adaptive_layer: adaptive_layer {
        compatible = "zmk,behavior-sticky-key";
        #binding-cells = <1>;
        bindings = <&mo>;
        release-after-ms = <200>;
        quick-release;
    };  

    behavior_caps_word {
        continue-list = <
            UNDERSCORE MINUS BACKSPACE DELETE
            N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
        >;
    };

    BT_HOLD_TAP(bt0, 0);
    BT_HOLD_TAP(bt1, 1);
    BT_HOLD_TAP(bt2, 2);
    BT_HOLD_TAP(bt3, 3);
};

macros {
    tmux_prefixed: tmux_prefixed {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_tap>
                , <&kp LC(A)>
                , <&macro_param_1to1>
                , <&kp MACRO_PLACEHOLDER>;
    };
    
    // Taps key and activates a layer
    adaptive_leader: adaptive_leader {
        compatible = "zmk,behavior-macro-two-param";
        #binding-cells = <2>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings = <&macro_press>
            , <&macro_param_1to1>
            , <&kp MACRO_PLACEHOLDER>
            , <&macro_param_2to1>
            , <&adaptive_layer MACRO_PLACEHOLDER>
            , <&macro_pause_for_release>
            , <&macro_release>
            , <&macro_param_1to1>
            , <&kp MACRO_PLACEHOLDER>
            , <&macro_param_2to1>
            , <&adaptive_layer MACRO_PLACEHOLDER>;
    };
    
    replacement_adaptive: replacement_adaptive {
        compatible = "zmk,behavior-macro-two-param";
        #binding-cells = <2>;
        tap-ms = <0>;
        wait-ms = <0>;
        bindings = <&kp Z>
            , <&kp BSPC>
            , <&kp BSPC>
            , <&macro_param_1to1>
            , <&kp MACRO_PLACEHOLDER>
            , <&macro_press>
            , <&macro_param_2to1>
            , <&kp MACRO_PLACEHOLDER>
            , <&macro_pause_for_release>
            , <&macro_release>
            , <&macro_param_2to1>
            , <&kp MACRO_PLACEHOLDER>;
    };
};

combos {
    compatible = "zmk,combos";

    to_hdg {
        key-positions = <20 21>;
        bindings = <&to LAYER_HandsDownGold>;
    };

    to_sys {
        key-positions = <20 22>;
        bindings = <&tog LAYER_Sys>;
    };
};

keymap {
    compatible = "zmk,keymap";

    HandsDownGold {
        bindings = <
            &kp J &kp G &kp M &kp P &kp V               &kp SEMI &kp DOT &kp COMMA &kp MINUS &kp SQT
            &kp R &kp S &kp N &kp D &kp B               &kp Z &kp A &kp E &kp I &kp H
            &kp X &kp F &kp L &kp C &kp W               &kp Q &kp U &kp O &kp Y &kp K
                        &kp BSPC &kp LSHIFT &kp T  &kp SPACE &kp LSHIFT &kp ENTER
        >;
    };

    Sys {
        bindings = <
            &none &none &none &none &none               &none &none &none &none &none
            &bt3 &bt2 &bt1 &bt0 &out OUT_TOG            &none &none &none &none &bt BT_CLR
            &bootloader &none &none &none &none         &none &none &none &none &bootloader
                            &none &none &none       &none &none &none
        >;
    };
};
};  // /
